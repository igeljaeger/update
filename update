#!/bin/bash
###
#Ubuntu apt package updates:
###
quiet-update() {
    # Silent update check
    sudo apt update -y >/dev/null 2>&1

    # Check if updates exist
    if [ $(apt list --upgradable 2>/dev/null | wc -l) -gt 1 ]; then
        echo "Updates available:"
        apt list --upgradable 2>/dev/null | grep -v '^Listing...'
        sudo apt upgrade -y --allow-downgrades 2>&1 | grep -v '^Summary:\|^WARNING\|^$'
    else
        echo "System up to date."
    fi
}
sudo apt autoremove -y 
###
#Install missing apt packages:
###
for pkg in steam-devices adb ffmpeg ani-cli yt-dlp syncplay fastfetch mpv openvpn openvpn-dco-dkms snapd flatpak plasma-discover-backend-snap plasma-discover-backend-flatpak; do
    if ! dpkg -s "$pkg" >/dev/null 2>&1; then
        sudo apt install -y "$pkg" >/dev/null 2>&1
    fi
done
###
# Check if Discord is installed
###
echo "Checking if Discord is installed..."
# Check if Discord exists in any package manager AND has an executable
discord_exists() {
    # Check apt/dpkg
    if dpkg -l | grep -q '^ii.*discord'; then
        [ -f /usr/bin/discord ] && return 0
    fi

    # Check snap
    if snap list discord 2>/dev/null | grep -q discord; then
        [ -f /snap/bin/discord ] && return 0
    fi

    # Check flatpak
    if flatpak list --app | grep -q 'com.discordapp.Discord'; then
        return 0  # Flatpak handles its own executables
    fi

    return 1
}

if ! discord_exists; then
    echo "Discord not found, installing .deb version..."
    wget -O discord.deb "https://discord.com/api/download?platform=linux&format=deb"
    sudo apt install -y ./discord.deb
    rm discord.deb

    # Install common missing dependencies
    sudo apt install -y libc++1 libatomic1
else
    echo "Discord already exists via apt, snap, or flatpak"
fi
###
#Install latest ani-cli version:
###
if [ ! -f ~/.local/bin/ani-cli ]; then
    wget -O ~/.local/bin/ani-cli https://github.com/pystardust/ani-cli/releases/latest/download/ani-cli > /dev/null 2>&1
    chmod a+rx ~/.local/bin/ani-cli > /dev/null 2>&1
fi
echo "Updating ani-cli."
output=$(ani-cli --update)
[[ "$output" =~ "up to date" ]] && echo "ani-cli is up to date." || echo "$output"
###
#Install latest yt-dlp version:
###
if [ ! -f ~/.local/bin/yt-dlp ]; then
    wget -O ~/.local/bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp > /dev/null 2>&1
    chmod a+rx ~/.local/bin/yt-dlp > /dev/null 2>&1
fi
echo "Updating yt-dlp."
yt-dlp --update | sed -n '/yt-dlp is up to date./s/(.*//p' | sed 's/\.$//' || true
###
#Install missing snap packages:
###
echo "Checking if some snaps are missing..."
for snap in scrcpy; do
    snap list "$snap" >/dev/null 2>&1 || sudo snap install "$snap" >/dev/null 2>&1
done
###
#Update flatpaks and snaps:
###
echo "Updating snaps."
sudo snap refresh
###
#Install missing flatpak packages:
###
echo "Checking if some flatpaks are missing..."
flatpaks=(
    "Brave"
    "Protontricks"
    "Flatseal"
    "Spotify"
    "SGDBoop"
    "Bottles"
    "Steam"
    "VSCodium"
    "Quick Web Apps"
    "Komikku"
    "AdwSteamGtk"
    "Hedge Mod Manager"
    "Ryujinx (Ryubing)"
    "Kooha"
    "Upscaler"
    "Lutris"
    "Luanti"
    "Scribus"
    "Floorp"
    "Dolphin Emulator"
    "Audacious"
    "Audacity"
    "Azahar"
    "Grabber"
    "Cheese"
    "Pika Backup"
    "JDownloader"
    "Krita"
    "KeePassXC"
    "LibreOffice"
    "PPSSPP"
    "qBittorrent"
    "Signal Desktop"
)

for flatpak_name in "${flatpaks[@]}"; do
    if ! flatpak list --app --columns=name | grep -qxF "$flatpak_name"; then
        app_id=$(flatpak search "$flatpak_name" --columns=name,application | \
                 awk -v name="$flatpak_name" '$1 == name {print $2; exit}')

        if [[ -n "$app_id" ]]; then
            echo "Installing '$flatpak_name'..."
            flatpak install flathub "$app_id" -y >/dev/null 2>&1
            echo "Installed: $flatpak_name ($app_id)"
        else
            echo "Error: Could not find '$flatpak_name' on Flathub"
        fi
    fi
done
echo "Updating flatpaks."
if output=$(flatpak update -y 2>&1); then
    # Filter and process output
    filtered=$(grep -v -e '^Info:' -e '^   ' -e '^$' <<< "$output" |
               sed '/Updating [0-9]\+[/][0-9]\+…/d; /^Updating [0-9]\+[/][0-9]\+…/d')

    if [[ "$filtered" =~ "Nothing to do" ]]; then
        echo "All flatpaks up to date."
    else
        # Extract and format update list
        updates_list=$(awk '/Looking for updates…/,/Updating [0-9]+\/[0-9]+/' <<< "$filtered" |
                       sed '/Looking/d; /Updating/d')
        echo "Updates applied:"
        echo "$updates_list"
    fi
fi
###
#Check for major distro-upgrades:
###
pending_pkg=$(sudo apt-get -s dist-upgrade | grep -P '^\d+ (removed|newly installed)')
if [[ -n "$pending_pkg" ]]; then
    echo "Major package changes required:"
    sudo apt-get -s dist-upgrade | grep -P '^\d+ (upgraded|newly installed|removed)'
    read -p "Continue? [y/N] " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]] && sudo apt-get dist-upgrade
fi
# Check for release upgrades
if sudo do-release-upgrade -c >/dev/null; then
    echo "New OS release available!"
    read -p "Upgrade release? [y/N] " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]] && sudo do-release-upgrade
fi
echo "Updates complete."
